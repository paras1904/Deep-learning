# -*- coding: utf-8 -*-
"""Denoising single image with Denoising autoencoder.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10FwfEwRj1iTJaxe-65F42rfgIQvM9AV3
"""

from google.colab.patches import cv2_imshow
import cv2
import numpy as np
from matplotlib.pyplot import imshow
from tensorflow.keras.layers import MaxPooling2D, UpSampling2D, Conv2D
from tensorflow.keras.models import Sequential
from tensorflow.keras.preprocessing.image import img_to_array

np.random.seed(42)
path = r'/content/chandler_autoencoder.jpg'
img = cv2.imread(path,1)
cv2_imshow(img)

noisy_img = cv2.GaussianBlur(img,(11,11),0)
cv2_imshow(noisy_img)

def func1(img):
  img_data = []
  size = 256
  img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
  img = cv2.resize(img,(size,size))
  img_data.append(img_to_array(img))
  img_array = np.reshape(img_data,(len(img_data),size,size,3))
  img_array = img_array.astype('float32')/255.
  return img_array

simp_img_arr = func1(img)
noisy_img_arr = func1(noisy_img)

model = Sequential([
                    Conv2D(512,(3,3),activation='relu',padding='same',input_shape=(size,size,3)),
                    MaxPooling2D((2,2),padding='same'),
                    Conv2D(256,(3,3),activation='relu',padding='same'),
                    MaxPooling2D((2,2),padding='same'),
                    Conv2D(128,(3,3),activation='relu',padding='same'),
                    MaxPooling2D((2,2),padding='same'),
                    Conv2D(64,(3,3),activation='relu',padding='same'),
                    MaxPooling2D((2,2),padding='same'),
                    Conv2D(32,(3,3),activation='relu',padding='same'),
                    MaxPooling2D((2,2),padding='same'),
                    Conv2D(16,(3,3),activation='relu',padding='same'),
                    MaxPooling2D((2,2),padding='same'),
                    Conv2D(8,(3,3),activation='relu',padding='same'),
                    MaxPooling2D((2,2),padding='same'), 

                    Conv2D(8,(3,3),activation='relu',padding='same'),
                    UpSampling2D((2,2)),
                    Conv2D(16,(3,3),activation='relu',padding='same'),
                    UpSampling2D((2,2)),
                    Conv2D(32,(3,3),activation='relu',padding='same'),
                    UpSampling2D((2,2)),
                    Conv2D(64,(3,3),activation='relu',padding='same'),
                    UpSampling2D((2,2)),
                    Conv2D(128,(3,3),activation='relu',padding='same'),
                    UpSampling2D((2,2)),
                    Conv2D(256,(3,3),activation='relu',padding='same'),
                    UpSampling2D((2,2)),
                    Conv2D(512,(3,3),activation='relu',padding='same'),
                    UpSampling2D((2,2)),
                    Conv2D(3,(3,3),activation='relu',padding='same'),

])
model.compile(optimizer='adam',loss='mean_squared_error',metrics = ['accuracy'])
model.summary()

model.fit(noisy_img_arr,simp_img_arr,epochs=3000,shuffle = True)

pred = model.predict(noisy_img_arr)

imshow(pred[0].reshape(size,size,3))

