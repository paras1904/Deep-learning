# -*- coding: utf-8 -*-
"""PDF book summerizer with hugging face transformer and semantic scores.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EwOrImE27PHqUpZA2yaFgvOB-KQAciGO
"""

# librarires
!pip install PyPDF2
import PyPDF2
!pip install transformers
!pip install sentence-transformers
import transformers
from transformers import pipeline
from sentence_transformers import SentenceTransformer, util
import numpy as np
from tqdm import tqdm

summerizer = pipeline('summarization')

def summeriser(temp):
  temp2 = summerizer(temp,max_length = len(temp)//10,min_length = (len(temp)//10)//10,do_sample = False)
  temp3 = str(temp2)
  return temp3

def clean(temp3):
  l1 = '[{\'summary_text\': \''
  l2 = '"\'}]'
  temp4 = temp3[len(l1):len(temp3)-len(l2)]
  temp5 = temp4.replace('"','')
  temp6 = temp5.replace('\\','')
   
  return temp6

def pdftext(path,start_page):
  pdf = open(path, 'rb')
  pdf_file = PyPDF2.PdfFileReader(pdf)
  num_pag = pdf_file.numPages
  l = []
  for i in range(0,num_pag):
    page = pdf_file.getPage(i)
    l.append(page.extractText())
  l = l[start_page:]
  return l

path = 'pass/'
text2 = [i for i in text if len(i)>10]

l = []
for i in tqdm(range(len(text2))):
  temp = summeriser(text2[i])
  l.append(temp)
 text3 = [clean(i) for i in l]
 text4 = " ".join(text3)

model = SentenceTransformer('stsb-roberta-large')

def similarity_score(book_text,summary):
  book_text1 = clean(" ".join(book_text))
  sentence1 = clean(book_text1)
  sentence2 = summary
  embedding1 = model.encode(sentence1, convert_to_tensor=True)
  embedding2 = model.encode(sentence2, convert_to_tensor=True)
  cosine_scores = util.pytorch_cos_sim(embedding1, embedding2)
  print("Similarity score:", cosine_scores.item())

similarity_score(text2,text4)

